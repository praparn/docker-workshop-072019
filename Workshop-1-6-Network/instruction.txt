For this workshop. We need you to deploy NGINX for load balance and reverse proxy
================================================================================
Part1: Reverse Proxy by DNS
================================================================================
1. Pull image nginx with command: 			"docker image pull labdocker/nginx:labnetwork"
2. Pull image nodejs (web1) with command:	"docker image pull labdocker/alpineweb:web1"
3. Pull image nodejs (web2) with command:	"docker image pull labdocker/alpineweb:web2"
4. Create Public Network with command:
	docker network create --driver bridge \
--subnet=192.168.100.0/24 --ip-range=192.168.100.128/25 \
--gateway=192.168.100.5 --opt="com.docker.network.mtu"="1500" webpublic

	docker network create --driver bridge \
--subnet=192.168.101.0/24 --ip-range=192.168.101.128/25 \
--gateway=192.168.101.5 --opt="com.docker.network.mtu"="9000" webinternal

5. Run container web1 & web2 with command:
	docker container run -dt --name web1 --net webinternal --net-alias web1 labdocker/alpineweb:web1 node hello.js
	docker container run -dt --name web2 --net webinternal --net-alias web2 labdocker/alpineweb:web2 node hello.js

6. Run container nginx and attach network 
	docker container run -dt --name nginx --net webinternal -p 80:8080 labdocker/nginx:labnetwork
	docker network connect webpublic nginx

7. Open url: http://<Public IP>/nodejs

8. Shell to nginx and test curl to nodejs with command below:
	docker container exec -it nginx sh
	curl http://web1:3000
	curl http://web2:3000

9. Clean up container with command:
	docker container stop web1 web2 nginx
	docker container rm web1 web2 nginx
	docker network rm webpublic webinternal

================================================================================
DEMO: Reverse Proxy by DNS with MACVLAN (DEMO from Instructor)
Note: If you need to join this lab. You need to install docker-machine over oracle virtualbox on MAC OS X
================================================================================
1. Pull image nginx with command: 		
	"docker image pull labdocker/nginx:labnetwork"

2. Check and Locate Network Card by command:
	ifconfig / ip addr

	Example: dockertoolbox (labdocker: eth1): Gateway: 192.168.99.1
	----------------------------------------------------------------------------------------
	docker@labdocker:~$ ip addr
	----------------------------------------------------------------------------------------
docker0   Link encap:Ethernet  HWaddr 02:42:45:01:0E:F9  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

eth0      Link encap:Ethernet  HWaddr 08:00:27:6F:12:9D  
          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe6f:129d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:299 errors:0 dropped:0 overruns:0 frame:0
          TX packets:221 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:41629 (40.6 KiB)  TX bytes:40838 (39.8 KiB)

eth1      Link encap:Ethernet  HWaddr 08:00:27:39:C9:62  
          inet addr:192.168.99.100  Bcast:192.168.99.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe39:c962/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1180 (1.1 KiB)  TX bytes:1485 (1.4 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
	---------------------------------------------------------------------------------------------

3. Create Network for MACVLAN by command: (This example: will extract 192.168.99.193 - 192.168.99.206 for macvlan)
	docker network create -d macvlan --subnet=192.168.99.0/24 --ip-range=192.168.99.192/28 --gateway=192.168.99.1 -o parent=eth1 macvlanlab

4. Run container for web1, web2 and nginx by command:
	docker container run -dt --name web1 --net macvlanlab --ip 192.168.99.193 --net-alias web1  labdocker/alpineweb:web1 node hello.js
	
	docker container run -dt --name web2 --net macvlanlab --ip 192.168.99.194 --net-alias web2 labdocker/alpineweb:web2 node hello.js

	docker container run -dt --name nginx --net macvlanlab --ip 192.168.99.195 --net-alias nginx labdocker/nginx:labnetwork

4. On virtualbox: Set Property of Network Card for promiscuous mode
and configure nic card for promiscuous mode via command:
	sudo ip link set dev eth1 promisc on

5. Test internal container connection by command:
	docker container exec -it nginx curl http://web1:3000
	docker container exec -it nginx curl http://web2:3000
	docker container exec -it nginx ping web1
	docker container exec -it nginx ping web2

6. Test connect from outside by command: (Operate on Your notebook)
	ping 192.168.99.193
	ping 192.168.99.194
	ping 192.168.99.195

7. Test open url for access by command:
	http://192.168.99.195:8080/					==> via NGINX
	http://192.168.99.195:8080/nodejs			==> via NGINX
	http://192.168.99.193:3000/					==> Native NODEJS1
	http://192.168.99.194:3000/					==> Native NODEJS2

9. Clean Up Lab by command:
	docker container stop nginx web1 web2
	docker container rm nginx web1 web2
	docker network rm macvlanlab